// Copyright 2004, Microsoft Corporation
// Sample Code - Use restricted to terms of use defined in the accompanying license agreement (EULA.doc)

//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.4.2.1
// Schema file: ActionEditConfig.xsd
// Creation Date: 13/11/2007 0:15:42
//--------------------------------------------------------------

using System;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Xml.Schema;
using System.Xml.Serialization;
using SPSProfessional.SharePoint.Framework.Error;
using SPSProfessional.SharePoint.Framework.ConfigurationManager;

namespace SPSProfessional.SharePoint.WebParts.ActionDataBase.ActionEditorConfig
{
    public struct Declarations
    {
        public const string SchemaVersion = "";
    }

    [Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class FieldCollection : ArrayList
    {
        public Field Add(Field obj)
        {
            base.Add(obj);
            return obj;
        }

        public Field Add()
        {
            return Add(new Field());
        }

        public void Insert(int index, Field obj)
        {
            base.Insert(index, obj);
        }

        public void Remove(Field obj)
        {
            base.Remove(obj);
        }

        public new Field this[int index]
        {
            get { return (Field) base[index]; }
            set { base[index] = value; }
        }
    }

    [Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class ItemCollection : ArrayList
    {
        public Item Add(Item obj)
        {
            base.Add(obj);
            return obj;
        }

        public Item Add()
        {
            return Add(new Item());
        }

        public void Insert(int index, Item obj)
        {
            base.Insert(index, obj);
        }

        public void Remove(Item obj)
        {
            base.Remove(obj);
        }

        new public Item this[int index]
        {
            get { return (Item)base[index]; }
            set { base[index] = value; }
        }
    }

    [Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class ValidatorCollection : ArrayList
    {
        public Validator Add(Validator obj)
        {
            base.Add(obj);
            return obj;
        }

        public Validator Add()
        {
            return Add(new Validator());
        }

        public void Insert(int index, Validator obj)
        {
            base.Insert(index, obj);
        }

        public void Remove(Validator obj)
        {
            base.Remove(obj);
        }

        public new Validator this[int index]
        {
            get { return (Validator) base[index]; }
            set { base[index] = value; }
        }
    }

    [Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class OptionCollection : ArrayList
    {
        public Option Add(Option obj)
        {
            base.Add(obj);
            return obj;
        }

        public Option Add()
        {
            return Add(new Option());
        }

        public void Insert(int index, Option obj)
        {
            base.Insert(index, obj);
        }

        public void Remove(Option obj)
        {
            base.Remove(obj);
        }

        public new Option this[int index]
        {
            get { return (Option) base[index]; }
            set { base[index] = value; }
        }
    }

    [Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class IdentityColumnCollection : ArrayList
    {
        public IdentityColumn Add(IdentityColumn obj)
        {
            base.Add(obj);
            return obj;
        }

        public IdentityColumn Add()
        {
            return Add(new IdentityColumn());
        }

        public void Insert(int index, IdentityColumn obj)
        {
            base.Insert(index, obj);
        }

        public void Remove(IdentityColumn obj)
        {
            base.Remove(obj);
        }

        public new IdentityColumn this[int index]
        {
            get { return (IdentityColumn) base[index]; }
            set { base[index] = value; }
        }
    }

    [Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class ActionToolBarCollection : ArrayList
    {
        public ActionToolBar Add(ActionToolBar obj)
        {
            base.Add(obj);
            return obj;
        }

        public ActionToolBar Add()
        {
            return Add(new ActionToolBar());
        }

        public void Insert(int index, ActionToolBar obj)
        {
            base.Insert(index, obj);
        }

        public void Remove(ActionToolBar obj)
        {
            base.Remove(obj);
        }

        public new ActionToolBar this[int index]
        {
            get { return (ActionToolBar) base[index]; }
            set { base[index] = value; }
        }
    }

    [XmlRoot(ElementName="SPSActionEditConfig", IsNullable=false)]
    [Serializable]
    public class SPSActionEditConfig
    {
        [XmlElement(Type=typeof(DataBase), ElementName="DataBase", IsNullable=false, Form=XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public DataBase __DataBase;

        [XmlIgnore]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        [DisplayName("1.- DataBase")]
        public DataBase DataBase
        {
            get
            {
                if (__DataBase == null)
                {
                    __DataBase = new DataBase();
                }
                return __DataBase;
            }
            set { __DataBase = value; }
        }

        [XmlElement(Type=typeof(ActionToolBars), ElementName="ActionToolBars", IsNullable=false, Form=XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ActionToolBars
            __ActionToolBars;

        [XmlIgnore]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        [DisplayName("2.- ActionToolBars")]
        public ActionToolBars ActionToolBars
        {
            get
            {
                if (__ActionToolBars == null)
                {
                    __ActionToolBars = new ActionToolBars();
                }
                return __ActionToolBars;
            }
            set { __ActionToolBars = value; }
        }

        [XmlElement(Type=typeof(Fields), ElementName="Fields", IsNullable=false, Form=XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Fields __Fields;

        [XmlIgnore]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        [DisplayName("3.- Fields")]
        public Fields Fields
        {
            get
            {
                if (__Fields == null)
                {
                    __Fields = new Fields();
                }
                return __Fields;
            }
            set { __Fields = value; }
        }

        [XmlElement(Type = typeof(SPSConfigErrors), ElementName = "Errors", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public SPSConfigErrors __Errors;

        [XmlIgnore]
        public SPSConfigErrors Errors
        {
            get
            {
                if (__Errors == null) __Errors = new SPSConfigErrors();
                return __Errors;
            }
            set { __Errors = value; }
        }

        public SPSActionEditConfig()
        {
        }

        public override string ToString()
        {
            return string.Empty;
        }
    }

    [XmlType(TypeName="DataBase")]
    [Serializable]
    public class DataBase
    {
        [XmlAttribute(AttributeName="ConnectionString", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __ConnectionString;

        [XmlIgnore]
        public string ConnectionString
        {
            get
            {
                if (__ConnectionString.Contains("SPSCM:"))
                {
                    Debug.WriteLine(__ConnectionString.Substring(6));
                    return SPSConfigurationManager.GetValue("ActionDataBase", __ConnectionString.Substring(6));

                }
                return __ConnectionString;
            }
            set { __ConnectionString = value; }
        }

        [XmlElement(Type=typeof(Table), ElementName="Table", IsNullable=false, Form=XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Table __Table;

        [XmlIgnore]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        public Table Table
        {
            get
            {
                if (__Table == null)
                {
                    __Table = new Table();
                }
                return __Table;
            }
            set { __Table = value; }
        }

        public DataBase()
        {
            ConnectionString = string.Empty;
        }

        public override string ToString()
        {
            return ConnectionString;
        }
    }

    [XmlType(TypeName="Table")]
    [Serializable]
    public class Table
    {
        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return IdentityColumnCollection.GetEnumerator();
        }

        public IdentityColumn Add(IdentityColumn obj)
        {
            return IdentityColumnCollection.Add(obj);
        }

        [XmlIgnore]
        public IdentityColumn this[int index]
        {
            get { return IdentityColumnCollection[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return IdentityColumnCollection.Count; }
        }

        public void Clear()
        {
            IdentityColumnCollection.Clear();
        }

        public IdentityColumn Remove(int index)
        {
            IdentityColumn obj = IdentityColumnCollection[index];
            IdentityColumnCollection.Remove(obj);
            return obj;
        }

        public void Remove(object obj)
        {
            IdentityColumnCollection.Remove(obj);
        }

        [XmlAttribute(AttributeName="Name", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __Name;

        [XmlIgnore]
        public string Name
        {
            get { return __Name; }
            set { __Name = value; }
        }

        [XmlElement(Type=typeof(IdentityColumn), ElementName="IdentityColumn", IsNullable=false,
            Form=XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public
            IdentityColumnCollection __IdentityColumnCollection;

        [XmlIgnore]
        public IdentityColumnCollection IdentityColumnCollection
        {
            get
            {
                if (__IdentityColumnCollection == null)
                {
                    __IdentityColumnCollection = new IdentityColumnCollection();
                }
                return __IdentityColumnCollection;
            }
            set { __IdentityColumnCollection = value; }
        }

        public Table()
        {
            Name = string.Empty;
        }

        public override string ToString()
        {
            return Name;
        }
    }

    [XmlType(TypeName="IdentityColumn")]
    [Serializable]
    public class IdentityColumn
    {
        [XmlAttribute(AttributeName="Name", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __Name;

        [XmlIgnore]
        public string Name
        {
            get { return __Name; }
            set { __Name = value; }
        }

        [XmlAttribute(AttributeName="Type", Form=XmlSchemaForm.Unqualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ActionDataBaseSqlType __Type;

        [XmlIgnore]      
        public ActionDataBaseSqlType Type
        {
            get { return __Type; }
            set { __Type = value; }
        }

        [XmlAttribute(AttributeName = "Incremental", Form = XmlSchemaForm.Unqualified, DataType = "boolean")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public bool __Incremental;

        [XmlIgnore]
        public bool Incremental
        {
            get { return __Incremental; }
            set { __Incremental = value; }
        }

        public IdentityColumn()
        {
            Name = string.Empty;
            Type = 0;
        }

        public override string ToString()
        {
            return Name;
        }
    }

    [XmlType(TypeName="ActionToolBars")]
    [Serializable]
    public class ActionToolBars
    {
        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return ActionToolBarCollection.GetEnumerator();
        }

        public ActionToolBar Add(ActionToolBar obj)
        {
            return ActionToolBarCollection.Add(obj);
        }

        [XmlIgnore]
        public ActionToolBar this[int index]
        {
            get { return ActionToolBarCollection[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return ActionToolBarCollection.Count; }
        }

        public void Clear()
        {
            ActionToolBarCollection.Clear();
        }

        public ActionToolBar Remove(int index)
        {
            ActionToolBar obj = ActionToolBarCollection[index];
            ActionToolBarCollection.Remove(obj);
            return obj;
        }

        public void Remove(object obj)
        {
            ActionToolBarCollection.Remove(obj);
        }

        [XmlElement(Type=typeof(ActionToolBar), ElementName="ActionToolBar", IsNullable=false,
            Form=XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public
            ActionToolBarCollection __ActionToolBarCollection;

        [XmlIgnore]
        public ActionToolBarCollection ActionToolBarCollection
        {
            get
            {
                if (__ActionToolBarCollection == null)
                {
                    __ActionToolBarCollection = new ActionToolBarCollection();
                }
                return __ActionToolBarCollection;
            }
            set { __ActionToolBarCollection = value; }
        }

        public ActionToolBars()
        {
        }

        public override string ToString()
        {
            return string.Empty;
        }
    }

    [XmlType(TypeName="ActionToolBar")]
    [Serializable]
    public class ActionToolBar
    {
        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return OptionCollection.GetEnumerator();
        }

        public Option Add(Option obj)
        {
            return OptionCollection.Add(obj);
        }

        [XmlIgnore]
        public Option this[int index]
        {
            get { return OptionCollection[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return OptionCollection.Count; }
        }

        public void Clear()
        {
            OptionCollection.Clear();
        }

        public Option Remove(int index)
        {
            Option obj = OptionCollection[index];
            OptionCollection.Remove(obj);
            return obj;
        }

        public void Remove(object obj)
        {
            OptionCollection.Remove(obj);
        }

        [XmlAttribute(AttributeName="Name", Form=XmlSchemaForm.Unqualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ActionEditorToolBar __Name;

        [XmlIgnore]       
        public ActionEditorToolBar Name
        {
            get { return __Name; }
            set { __Name = value; }
        }

        [XmlElement(Type=typeof(Option), ElementName="Option", IsNullable=false, Form=XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public OptionCollection __OptionCollection;

        [XmlIgnore]
        public OptionCollection OptionCollection
        {
            get
            {
                if (__OptionCollection == null)
                {
                    __OptionCollection = new OptionCollection();
                }
                return __OptionCollection;
            }
            set { __OptionCollection = value; }
        }

        public ActionToolBar()
        {
            Name = 0;
        }

        public override string ToString()
        {
            return Name.ToString();
        }
    }

    [XmlType(TypeName="Option")]
    [Serializable]
    public class Option
    {
        [XmlAttribute(AttributeName="Name", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __Name;

        [XmlIgnore]
        public string Name
        {
            get { return __Name; }
            set { __Name = value; }
        }

        [XmlAttribute(AttributeName="ImageUrl", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __ImageUrl;

        [XmlIgnore]
        public string ImageUrl
        {
            get { return __ImageUrl; }
            set { __ImageUrl = value; }
        }

        [XmlAttribute(AttributeName="Action", Form=XmlSchemaForm.Unqualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ActionEditorToolBarsActions __Action;

        [XmlIgnore]
        public ActionEditorToolBarsActions Action
        {
            get { return __Action; }
            set { __Action = value; }
        }

        [XmlAttribute(AttributeName="NavigateUrl", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __NavigateUrl;

        [XmlIgnore]
        public string NavigateUrl
        {
            get { return __NavigateUrl; }
            set { __NavigateUrl = value; }
        }

        public Option()
        {
            Name = string.Empty;
        }

        public override string ToString()
        {
            return Name;
        }
    }

    [XmlType(TypeName="Fields")]
    [Serializable]
    public class Fields
    {
        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return FieldCollection.GetEnumerator();
        }

        public Field Add(Field obj)
        {
            return FieldCollection.Add(obj);
        }

        [XmlIgnore]
        public Field this[int index]
        {
            get { return FieldCollection[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return FieldCollection.Count; }
        }

        public void Clear()
        {
            FieldCollection.Clear();
        }

        public Field Remove(int index)
        {
            Field obj = FieldCollection[index];
            FieldCollection.Remove(obj);
            return obj;
        }

        public void Remove(object obj)
        {
            FieldCollection.Remove(obj);
        }

        [XmlElement(Type=typeof(Field), ElementName="Field", IsNullable=false, Form=XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public FieldCollection __FieldCollection;

        [XmlIgnore]
        public FieldCollection FieldCollection
        {
            get
            {
                if (__FieldCollection == null)
                {
                    __FieldCollection = new FieldCollection();
                }
                return __FieldCollection;
            }
            set { __FieldCollection = value; }
        }

        public Fields()
        {
        }

        public override string ToString()
        {
            return string.Empty;
        }
    }

    [XmlType(TypeName="Field")]
    [Serializable]
    public class Field
    {
        [XmlAttribute(AttributeName="Name", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __Name;

        [XmlIgnore]
        [DisplayName("1.- Name")]
        public string Name
        {
            get { return __Name; }
            set { __Name = value; }
        }

        [XmlAttribute(AttributeName="Title", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __Title;

        [XmlIgnore]
        [DisplayName("2.- Title")]
        public string Title
        {
            get { return __Title; }
            set { __Title = value; }
        }

        [XmlAttribute(AttributeName="Control", Form=XmlSchemaForm.Unqualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ActionEditorControlsType __Control;

        [XmlIgnore]
        [DisplayName("3.- Control")]
        public ActionEditorControlsType Control
        {
            get { return __Control; }
            set { __Control = value; }
        }

        [XmlAttribute(AttributeName="Type", Form=XmlSchemaForm.Unqualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ActionDataBaseSqlType __Type;

        [XmlIgnore]
        //[TypeConverter(typeof(SqlTypesConverter))]
        [DisplayName("4.- Type")]
        public ActionDataBaseSqlType Type
        {
            get { return __Type; }
            set { __Type = value; }
        }

        [XmlAttribute(AttributeName="Required", Form=XmlSchemaForm.Unqualified, DataType="boolean")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public bool __Required;

        [XmlIgnore]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public bool __RequiredSpecified;

        [XmlIgnore]
        [DisplayName("5.- Required")]
        public bool Required
        {
            get { return __Required; }
            set
            {
                __Required = value;
                __RequiredSpecified = true;
            }
        }

        [XmlAttribute(AttributeName="DefaultValue", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __DefaultValue;

        [XmlIgnore]
        [DisplayName("6.- Default value")]
        public string DefaultValue
        {
            get { return __DefaultValue; }
            set { __DefaultValue = value; }
        }

        [XmlAttribute(AttributeName="DisplayFormat", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __DisplayFormat;

        [XmlIgnore]
        [DisplayName("7.- Display format")]
        public string DisplayFormat
        {
            get { return __DisplayFormat; }
            set { __DisplayFormat = value; }
        }

        [XmlAttribute(AttributeName="New", Form=XmlSchemaForm.Unqualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ActionEditorFieldVisibility __New;

        [XmlIgnore]       
        [DisplayName("8.- New")]
        public ActionEditorFieldVisibility @New
        {
            get { return __New; }
            set { __New = value; }
        }

        [XmlAttribute(AttributeName="Edit", Form=XmlSchemaForm.Unqualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ActionEditorFieldVisibility __Edit;

        [XmlIgnore]
        [DisplayName("9.- Edit")]
        public ActionEditorFieldVisibility Edit
        {
            get { return __Edit; }
            set { __Edit = value; }
        }

        [XmlAttribute(AttributeName="View", Form=XmlSchemaForm.Unqualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ActionEditorFieldVisibility __View;

        [XmlIgnore]
        [DisplayName("A.- View")]
        public ActionEditorFieldVisibility View
        {
            get { return __View; }
            set { __View = value; }
        }

        [XmlAttribute(AttributeName="Description", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __Description;

        [XmlIgnore]
        [DisplayName("B.- Description")]
        public string Description
        {
            get { return __Description; }
            set { __Description = value; }
        }

        //[XmlAttribute(AttributeName="Validator",Form=XmlSchemaForm.Unqualified,DataType="string")]
        //[EditorBrowsable(EditorBrowsableState.Advanced)]
        //public string __Validator;

        //[XmlIgnore]
        //public string Validator
        //{ 
        //    get { return __Validator; }
        //    set { __Validator = value; }
        //}

        [XmlElement(Type=typeof(TextBox), ElementName="TextBox", IsNullable=false, Form=XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public TextBox __TextBox;

        [XmlIgnore]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        [DisplayName("C.- TextBox control")]
        public TextBox TextBox
        {
            get
            {
                if (__TextBox == null)
                {
                    __TextBox = new TextBox();
                }
                return __TextBox;
            }
            set { __TextBox = value; }
        }

        [XmlElement(Type = typeof(CheckBox), ElementName = "CheckBox", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public CheckBox __CheckBox;

        [XmlIgnore]
        [TypeConverter(typeof (ExpandableObjectConverter))]
        [DisplayName("D.- CheckBox control")]
        public CheckBox CheckBox
        {
            get
            {
                if (__CheckBox == null)
                {
                    __CheckBox = new CheckBox();
                }
                return __CheckBox;
            }
            set { __CheckBox = value; }
        }

        [XmlElement(Type = typeof(Memo), ElementName = "Memo", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Memo __Memo;

        [XmlIgnore]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        [DisplayName("E.- Memo control")]
        public Memo Memo
        {
            get
            {
                if (__Memo == null)
                {
                    __Memo = new Memo();
                }
                return __Memo;
            }
            set { __Memo = value; }
        }

        [XmlElement(Type=typeof(Lookup), ElementName="Lookup", IsNullable=false, Form=XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Lookup __Lookup;

        [XmlIgnore]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        [DisplayName("F.- Lookup control")]
        public Lookup Lookup
        {
            get
            {
                if (__Lookup == null)
                {
                    __Lookup = new Lookup();
                }
                return __Lookup;
            }
            set { __Lookup = value; }
        }


        [XmlElement(Type = typeof(ListItems), ElementName = "ListItems", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ListItems __ListItems;

        [XmlIgnore]
        [DisplayName("G.- ListItems")]
        public ListItems ListItems
        {
            get
            {
                if (__ListItems == null) __ListItems = new ListItems();
                return __ListItems;
            }
            set { __ListItems = value; }
        }

        [XmlElement(Type=typeof(Validators), ElementName="Validators", IsNullable=false, Form=XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Validators __Validators;

        [XmlIgnore]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        [DisplayName("H.- Validators")]
        public Validators Validators
        {
            get
            {
                if (__Validators == null)
                {
                    __Validators = new Validators();
                }
                return __Validators;
            }
            set { __Validators = value; }
        }

        public Field()
        {
            Name = string.Empty;
            Title = string.Empty;
            Type = 0;
            __RequiredSpecified = true;
            DefaultValue = string.Empty;
            @New = ActionEditorFieldVisibility.Enabled;
            Edit = ActionEditorFieldVisibility.Enabled;
            View = ActionEditorFieldVisibility.Enabled;
        }

        public override string ToString()
        {
            return Name;
        }
    }

    [XmlType(TypeName="TextBox")]
    [Serializable]
    public class TextBox
    {
        [XmlAttribute(AttributeName="Columns", Form=XmlSchemaForm.Unqualified, DataType="unsignedShort")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ushort __Columns;

        [XmlIgnore]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public bool __ColumnsSpecified;

        [XmlIgnore]
        public ushort Columns
        {
            get { return __Columns; }
            set
            {
                __Columns = value;
                __ColumnsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName="MaxLength", Form=XmlSchemaForm.Unqualified, DataType="unsignedShort")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ushort __MaxLength;

        [XmlIgnore]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public bool __MaxLenghtSpecified;

        [XmlIgnore]
        public ushort MaxLength
        {
            get { return __MaxLength; }
            set
            {
                __MaxLength = value;
                __MaxLenghtSpecified = true;
            }
        }

        [XmlAttribute(AttributeName="RightToLeft", Form=XmlSchemaForm.Unqualified, DataType="boolean")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public bool __RightToLeft;

        [XmlIgnore]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public bool __RightToLeftSpecified;

        [XmlIgnore]
        public bool RightToLeft
        {
            get { return __RightToLeft; }
            set
            {
                __RightToLeft = value;
                __RightToLeftSpecified = true;
            }
        }

        public TextBox()
        {
            __ColumnsSpecified = true;
            __MaxLenghtSpecified = true;
            __RightToLeftSpecified = true;
        }

        public override string ToString()
        {
            return "[TextBox]";
        }
    }

    [XmlType(TypeName = "CheckBox")]
    [Serializable]
    public class CheckBox
    {
        [XmlAttribute(AttributeName = "TextChecked", Form = XmlSchemaForm.Unqualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __TextChecked;

        [XmlIgnore]
        public string TextChecked
        {
            get { return __TextChecked; }
            set { __TextChecked = value; }
        }

        [XmlAttribute(AttributeName = "TextUnChecked", Form = XmlSchemaForm.Unqualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __TextUnChecked;

        [XmlIgnore]
        public string TextUnChecked
        {
            get { return __TextUnChecked; }
            set { __TextUnChecked = value; }
        }

        public CheckBox()
        {
            TextChecked = string.Empty;
            TextUnChecked = string.Empty;
        }

        public override string ToString()
        {
            return "[Checkbox]";
        }
    }

    [XmlType(TypeName="Memo")]
    [Serializable]
    public class Memo
    {
        [XmlAttribute(AttributeName="Columns", Form=XmlSchemaForm.Unqualified, DataType="unsignedShort")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ushort __Columns;

        [XmlIgnore]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public bool __ColumnsSpecified;

        [XmlIgnore]
        public ushort Columns
        {
            get { return __Columns; }
            set
            {
                __Columns = value;
                __ColumnsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName="Rows", Form=XmlSchemaForm.Unqualified, DataType="unsignedShort")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ushort __Rows;

        [XmlIgnore]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public bool __RowsSpecified;

        [XmlIgnore]
        public ushort Rows
        {
            get { return __Rows; }
            set
            {
                __Rows = value;
                __RowsSpecified = true;
            }
        }

        [XmlAttribute(AttributeName="MaxLength", Form=XmlSchemaForm.Unqualified, DataType="unsignedShort")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ushort __MaxLength;

        [XmlIgnore]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public bool __MaxLengthSpecified;

        [XmlIgnore]
        public ushort MaxLength
        {
            get { return __MaxLength; }
            set
            {
                __MaxLength = value;
                __MaxLengthSpecified = true;
            }
        }

        [XmlAttribute(AttributeName = "RichText", Form = XmlSchemaForm.Unqualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __RichText;

        [XmlIgnore]
        public string RichText
        {
            get { return __RichText; }
            set { __RichText = value; }
        }


        public Memo()
        {
            __ColumnsSpecified = true;
            __RowsSpecified = true;
            __MaxLengthSpecified = true;
            __RichText = "Full";
        }

        public override string ToString()
        {
            return "[Memo]";
        }
    }

    [XmlType(TypeName="Lookup")]
    [Serializable]
    public class Lookup
    {
        [XmlAttribute(AttributeName = "ControlEditor", Form = XmlSchemaForm.Unqualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ActionEditorLookupControl __ControlEditor;

        [XmlIgnore]
        public ActionEditorLookupControl ControlEditor
        {
            get { return __ControlEditor; }
            set { __ControlEditor = value; }
        }

        [XmlAttribute(AttributeName="TextField", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __TextField;

        [XmlIgnore]
        public string TextField
        {
            get { return __TextField; }
            set { __TextField = value; }
        }

        [XmlAttribute(AttributeName="ValueField", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __ValueField;

        [XmlIgnore]
        public string ValueField
        {
            get { return __ValueField; }
            set { __ValueField = value; }
        }

        [XmlAttribute(AttributeName="Table", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __Table;

        [XmlAttribute(AttributeName = "ValueFieldType", Form = XmlSchemaForm.Unqualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ActionDataBaseSqlType __ValueFieldType;

        [XmlIgnore]
        public ActionDataBaseSqlType ValueFieldType
        {
            get { return __ValueFieldType; }
            set { __ValueFieldType = value; }
        }

        [XmlIgnore]
        public string Table
        {
            get { return __Table; }
            set { __Table = value; }
        }

        [XmlAttribute(AttributeName="DisplayFormat", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __DisplayFormat;

        [XmlIgnore]
        public string DisplayFormat
        {
            get { return __DisplayFormat; }
            set { __DisplayFormat = value; }
        }

        public Lookup()
        {
            ControlEditor = 0;
            TextField = string.Empty;
            ValueField = string.Empty;
            Table = string.Empty;
            DisplayFormat = string.Empty;
        }

        public override string ToString()
        {
            return string.Format("[{0} {1}]", ControlEditor, Table);
        }
    }
    [XmlType(TypeName = "ListItems"), Serializable]
    public class ListItems
    {
        [System.Runtime.InteropServices.DispIdAttribute(-4)]
        public IEnumerator GetEnumerator()
        {
            return ItemCollection.GetEnumerator();
        }

        public Item Add(Item obj)
        {
            return ItemCollection.Add(obj);
        }

        [XmlIgnore]
        public Item this[int index]
        {
            get { return (Item)ItemCollection[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return ItemCollection.Count; }
        }

        public void Clear()
        {
            ItemCollection.Clear();
        }

        public Item Remove(int index)
        {
            Item obj = ItemCollection[index];
            ItemCollection.Remove(obj);
            return obj;
        }

        public void Remove(object obj)
        {
            ItemCollection.Remove(obj);
        }

        [XmlAttribute(AttributeName = "Multiple", Form = XmlSchemaForm.Unqualified, DataType = "boolean")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public bool __Multiple;

        [XmlIgnore]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public bool __MultipleSpecified;

        [XmlIgnore]
        public bool Multiple
        {
            get { return __Multiple; }
            set { __Multiple = value; __MultipleSpecified = true; }
        }

        [XmlElement(Type = typeof(Item), ElementName = "Item", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ItemCollection __ItemCollection;

        [XmlIgnore]
        public ItemCollection ItemCollection
        {
            get
            {
                if (__ItemCollection == null) __ItemCollection = new ItemCollection();
                return __ItemCollection;
            }
            set { __ItemCollection = value; }
        }

        public ListItems()
        {
            __MultipleSpecified = true;
        }
    }


    [XmlType(TypeName = "Item"), Serializable]
    public class Item
    {

        [XmlAttribute(AttributeName = "Text", Form = XmlSchemaForm.Unqualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __Text;

        [XmlIgnore]
        public string Text
        {
            get { return __Text; }
            set { __Text = value; }
        }

        [XmlAttribute(AttributeName = "Value", Form = XmlSchemaForm.Unqualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __Value;

        [XmlIgnore]
        public string @Value
        {
            get { return __Value; }
            set { __Value = value; }
        }

        [XmlAttribute(AttributeName = "Selected", Form = XmlSchemaForm.Unqualified, DataType = "boolean")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public bool __Selected;

        [XmlIgnore]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public bool __SelectedSpecified;

        [XmlIgnore]
        public bool Selected
        {
            get { return __Selected; }
            set { __Selected = value; __SelectedSpecified = true; }
        }

        public Item()
        {
            Text = string.Empty;
            @Value = string.Empty;
        }
    }

    [XmlType(TypeName="Validators")]
    [Serializable]
    public class Validators
    {
        [DispId(-4)]
        public IEnumerator GetEnumerator()
        {
            return ValidatorCollection.GetEnumerator();
        }

        public Validator Add(Validator obj)
        {
            return ValidatorCollection.Add(obj);
        }

        [XmlIgnore]
        public Validator this[int index]
        {
            get { return ValidatorCollection[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return ValidatorCollection.Count; }
        }

        public void Clear()
        {
            ValidatorCollection.Clear();
        }

        public Validator Remove(int index)
        {
            Validator obj = ValidatorCollection[index];
            ValidatorCollection.Remove(obj);
            return obj;
        }

        public void Remove(object obj)
        {
            ValidatorCollection.Remove(obj);
        }

        [XmlElement(Type=typeof (Validator), ElementName="Validator", IsNullable=false, Form=XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ValidatorCollection __ValidatorCollection;

        [XmlIgnore]
        //[Editor(typeof (CollectionEditor), typeof (UITypeEditor))]
        public ValidatorCollection ValidatorCollection
        {
            get
            {
                if (__ValidatorCollection == null)
                {
                    __ValidatorCollection = new ValidatorCollection();
                }
                return __ValidatorCollection;
            }
            set { __ValidatorCollection = value; }
        }

        public Validators()
        {
        }

        public override string ToString()
        {
            string value = "[";
            foreach (Validator validator in ValidatorCollection)
            {
                value += validator.Type + ",";
            }
            return value.TrimEnd(',') + "]";
        }
    }

    [XmlType(TypeName="Validator")]
    [Serializable]
    public class Validator
    {
        [XmlAttribute(AttributeName="Type", Form=XmlSchemaForm.Unqualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ActionEditorTypeValidation __Type;

        [XmlIgnore]
        [DisplayName("1.- Type")]
        public ActionEditorTypeValidation Type
        {
            get { return __Type; }
            set { __Type = value; }
        }

        [XmlAttribute(AttributeName="DataType", Form=XmlSchemaForm.Unqualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ActionEditorDataTypeValidator __DataType;

        [XmlIgnore]
        [DisplayName("2.- DataType")]
        public ActionEditorDataTypeValidator DataType
        {
            get { return __DataType; }
            set { __DataType = value; }
        }

        [XmlAttribute(AttributeName="ErrorMessage", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __ErrorMessage;

        [XmlIgnore]
        [DisplayName("3.- ErrorMessage")]
        public string ErrorMessage
        {
            get { return __ErrorMessage; }
            set { __ErrorMessage = value; }
        }

        [XmlAttribute(AttributeName="Expression", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __Expression;

        [XmlIgnore]
        [DisplayName("4.- Expression")]
        public string Expression
        {
            get { return __Expression; }
            set { __Expression = value; }
        }

        [XmlAttribute(AttributeName="Operation", Form=XmlSchemaForm.Unqualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ActionEditorValidatorCompareOperator __Operation;

        [XmlIgnore]        
        [DisplayName("5.- Operation")]
        public ActionEditorValidatorCompareOperator Operation
        {
            get { return __Operation; }
            set { __Operation = value; }
        }

        [XmlAttribute(AttributeName="Value", Form=XmlSchemaForm.Unqualified, DataType="string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __Value;

        [XmlIgnore]
        [DisplayName("6.- Value")]
        public string @Value
        {
            get { return __Value; }
            set { __Value = value; }
        }

        [XmlAttribute(AttributeName = "MaxValue", Form = XmlSchemaForm.Unqualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __MaxValue;

        [XmlIgnore]
        [DisplayName("7.- MaxValue")]
        public string MaxValue
        {
            get { return __MaxValue; }
            set { __MaxValue = value; }
        }

        [XmlAttribute(AttributeName = "MinValue", Form = XmlSchemaForm.Unqualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __MinValue;

        [XmlIgnore]
        [DisplayName("8.- MinValue")]
        public string MinValue
        {
            get { return __MinValue; }
            set { __MinValue = value; }
        }

        public Validator()
        {
            Type = 0;
            ErrorMessage = string.Empty;
        }
    }

    [Serializable]
    public enum ActionEditorControlsType
    {
        TextBox,
        Memo,
        Lookup,
        Date,
        DateTime,
        CheckBox,
        ListBox,
        DropDownList
    }

    [Serializable]
    public enum ActionDataBaseSqlType
    {
        BigInt,
        Binary,
        Bit,
        Char,
        DateTime, 
        Decimal,
        Float,
        //Image,
        Int,
        Money,
        NChar,
        NText,
        Numeric,
        NVarChar,
        Real,
        SmallDateTime,
        SmallInt,
        SmallMoney,
        //SysName,
        Text,
        TimeStamp,
        TinyInt,
        UniqueIdentifier,
        VarChar
    }

    [Serializable]
    public enum ActionEditorDefaultType
    {
        _DateNow,
        _DateTimeNow,
        _MonthNumber,
        _YearNumber,
        _DayNumber,
        _Guid,
        _UserLogin,
        _UserName,
        _UserEmail,
        _WebName,
        _WebTitle,
        _WebUrl
    }

    [Serializable]
    public enum ActionEditorTypeValidation
    {
        RegEx,
        Compare,
        Range
    }

    [Serializable]
    public enum ActionEditorDataTypeValidator
    {
        None,
        Currency,
        Date,
        Double,
        Integer,
        String
    }

    [Serializable]
    public enum ActionEditorValidatorCompareOperator
    {
        None,
        DataTypeCheck,
        Equal,
        GreaterThan,
        GreaterThanEqual,
        LessThan,
        LessThanEqual,
        NotEqual
    }

    [Serializable]
    public enum ActionEditorToolBar
    {
        New,
        Edit,
        View
    }

    [Serializable]
    public enum ActionEditorToolBarsActions
    {
        None,
        New,
        Edit,
        Delete,
        Create,
        Update,
        Back
    }

    [Serializable]
    public enum ActionEditorFieldVisibility
    {
        Enabled,
        Disabled,
        Hidden
    }

    [Serializable]
    public enum ActionEditorLookupControl
    {
        DropDownList,
        PickerDataBase
    }
}